name: Deploy Django to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}   # manual "Run workflow" button

concurrency:
  group: deploy-vs-training-website
  cancel-in-progress: true

env:
  AZURE_WEBAPP_NAME: vs-training-website
  AZURE_RESOURCE_GROUP: appsvc_linux_northeurope_basic

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üöÄ Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: Production
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}

      - name: üõ†Ô∏è Migrate & collectstatic (inside container)
        if: always()
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp ssh \
              --name "${{ env.AZURE_WEBAPP_NAME }}" \
              --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
              --command '
                set -euo pipefail
                ROOT=/home/site/wwwroot
                cd "$ROOT"

                # Unpack if Oryx left a package
                if [ -f output.tar.gz ]; then
                  echo "Extracting output.tar.gz into $ROOT..."
                  tar -xzf output.tar.gz -C "$ROOT"
                fi

                # Detect layout and compute settings module
                if [ -d myproject/myprojectsettings ]; then
                  cd myproject
                  SETTINGS="myproject.myprojectsettings.settings"
                elif [ -d myprojectsettings ]; then
                  SETTINGS="myprojectsettings.settings"
                else
                  echo "ERROR: myprojectsettings/ not found under $ROOT"
                  ls -la "$ROOT"
                  exit 1
                fi

                echo "Using DJANGO_SETTINGS_MODULE=$SETTINGS"

                # Sanity: make sure settings import works
                python -c "import importlib,sys; m=\"${SETTINGS}\"; importlib.import_module(m); print(\"Settings OK:\", m)"

                # Idempotent admin tasks
                python manage.py migrate --noinput --settings="$SETTINGS"
                python manage.py collectstatic --noinput --settings="$SETTINGS"
              '

      - name: üîé Health check
        run: |
          set -euo pipefail
          URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/"
          echo "Probing $URL ..."
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          echo "HTTP $code"
          if [ "$code" -lt 200 ] || [ "$code" -ge 400 ]; then
            echo "Health check failed"
            exit 1
          fi
          echo "Healthy ‚úÖ"

